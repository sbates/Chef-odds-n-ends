This is where I'm at.  A resource file, a recipe file and a data bag file for disk partitions.  Starting in on a provider now.
# kickstart file opts
attribute :path,          :kind_of => String, :name_attribute => true
attribute :group,         :regex => Chef::Config[:group_valid_regex]
attribute :mode,          :regex => /^0?\d{3,4}$/
attribute :owner,         :regex => Chef::Config[:group_valid_regex]
attribute :platform,      :default => "redhat" # hopefully can also use ubuntu in the future

# kickstart options; an attribute exists if a)an opt is required or b)I've explicitly set a default
# OR c)if the option is complex and likely to be used (like disk)
# Your options will REPLACE the defaults, NOT append

# disk options; needs checks, need to have part/volgroup/logvol in order and required by each other
attribute :clearpart,     :kind_of => String,:default => "--all --initlabel"
attribute :raid,          :kind_of => Array
attribute :part,          :kind_of => Array, :default => ["autopart", "clearpart --all --initlabel"]
attribute :logvol,        :kind_of => Array
attribute :volgroup,      :kind_of => Array

attribute :zerombr,       :default => true
attribute :install,       :default => true  # set to false for update
attribute :source,        :kind_of => String, :default => "cdrom" # replace with other methods
attribute :key,           :kind_of => String, :default => "--skip" # replace with actual key if desired
attribute :network,       :kind_of => String  # if not set and install is http/ftp/nfs, rh ks assumes dhcp over eth0
attribute :auth,          :kind_of => String, :default => "--enableshadow --enablemd5"
attribute :bootloader,    :kind_of => String, :default => "--location=mbr"
attribute :firewall,      :kind_of => String, :default => "--disabled"
attribute :finish_opts,   :equal_to => ["halt", "poweroff", "shutdown", "reboot"],  :default => "reboot"
attribute :timezone,      :kind_of => String, :default => "--utc"
attribute :selinux,       :kind_of => String, :equal_to => ["--enforcing", "--permissive", "--disabled"], :default => "--permissive"
attribute :skipx,         :default => true  # set to false if xconfig opts desired
attribute :keyboard,      :kind_of => String, :default => "us"
attribute :lang,          :kind_of => String, :default => "en_US"
attribute :rootpw,        :kind_of => String, :default => "icanhazpazzwerd?" # opts: --iscrypted <password>
attribute :text,          :default => true
attribute :moar_opts,     :kind_of => Hash  # for any optional params ex: { "logging" => "--loggingopt1 --loggingopt2"}
attribute :moar_pkgs,     :kind_of => Array # kickstart auto-includes @core, @base; (opts --nobase, pkg1, pkg2, -pkg3)

-----------------------------------------------------------



Look in the folders for existing kickstart stuff.  Ways I've been thinking about modifying are here in the README

looking to produce something like this (R is required)
rules - the recipe should be able to pass in extra args, appended to the current list; the args should first be compared to existing args and replace if necessary.
------------------------------------------
install
install_method (set default) if install method not nfs, http, ftp then no network
network
clearpart --all --initlabel
autopart unless part
ignoredisk
authconfig R  --enableshadow --enablemd5
bootloader R (--location=mbr)
firewall --disabled 
key --skip
keyboard R us
lang R en_US
rootpw R somepw
selinux --permissive
skipx unless xconfig
text
timezone R --utc unless timezone
zerombr unless nozerombr
reboot unless halt, poweroff, shutdown

# Base Packages
# @core and @base are included by default
# Just need to provide a place for any special pkg +/- from recipe
%packages

# Instructions for post should only involve getting a working chef client chef-client
%post

--------------------------------------


more random notes:
# ensure the ks env is set up
attributes:
base_dir "/var/www/mrepo"
ks_dir "#{base_dir}/ks"
ks_server node.chef.my_chef_server

----------------------
# make the base ks use autopart, but offer a way to pass in volume info?  Either with a resource or have the recipe supply a hash?
ks_volume "name" do
	pesize
	pv
end

ks_filesystem "swap" do
	slashname "/swap"
	fstype "swap"
	vgname "VolGroup00"
	size "8192"


ksfile "my_ks" do
	platform "redhat"
	platform_version "5.5"
	pkgs ["gcc", "@X Window System", "--nobase", "-autofs"]
	install_chef_client :full|post|no
	install_options ["some option", "--someother option"]
end
------------------------------------------------------
#### Thinking maybe make all the args passable by the recipe, but set sane defaults in the back end
#### Attributes don't work well because things aren't always the same across redhat distros (or ubuntu)
install_args

  "firstboot --disable\n",
	"network #{network_args}\n",
	"rootpw #{rootpw_args}\n",
	"selinux #{selinux_args}\n",
	"skipx\n",
	"timezone #{tz_args}"
	"authconfig #{auth_args}\n"
	"firewall #{firewall_args}\n"


volume_args
unless volume_args passed in:
"autopart"

##### Base Packages
##### @core and @base are included by default
##### Just need to provide a place for any special pkg +/- from recipe
      base_packages = [
          "%packages",
          "recipe-passed pkgs"
      ]
%post
if chef full, include a section in post for installing the client
wget client tgz
untar
modify with local chef server/validation key (or platform stuff)

if not chef full:
get/install ruby, rubygems, chef

do the rest of the post configs